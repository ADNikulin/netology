user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;
    keepalive_timeout  65;
    #gzip  on;

    include /etc/nginx/conf.d/*.conf;

    server {
        access_log /var/log/nginx/api_access.log main;
        error_log /var/log/nginx/api_errors.log;

        listen 8080;
        server_name api.example.com;

        location /v1/register {
            proxy_pass http://security:3000/v1/user;
        }
        location /v1/token {
            proxy_pass http://security:3000/v1/token;
        }
        location /v1/user {
            auth_request /v1/token/validation;
            proxy_pass http://security:3000/v1/user;
        }
        location /v1/upload {
            auth_request /v1/token/validation;
            proxy_pass http://uploader:3000/v1/upload;
        }
        location /v1/user/images/ {
            auth_request /v1/token/validation;
            proxy_pass http://storage:9000/data/;
        }
        location /v1/token/validation {
            internal;
            proxy_pass http://security:3000/v1/token/validation;
            proxy_set_header Authorization $http_authorozation;
        }

        proxy_intercept_errors on;     # Do not send backend errors to client
        default_type application/json; # If no content-type, assume JSON

        error_page 400 = @400;
        location @400 { return 400 '{"status":400,"message":"Bad request"}\n'; }

        error_page 401 = @401;
        location @401 { return 401 '{"status":401,"message":"Unauthorized"}\n'; }

        error_page 403 = @403;
        location @403 { return 403 '{"status":403,"message":"Forbidden"}\n'; }

        error_page 404 = @404;
        location @404 { return 404 '{"status":404,"message":"Resource not found"}\n'; }
    }
}